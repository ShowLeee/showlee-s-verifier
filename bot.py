import discord
from discord.ext import commands, tasks
from discord.ui import Button, View, Modal, TextInput, Select
import asyncio
import datetime
import aiohttp
import os
import json
from dotenv import load_dotenv
import traceback

# ===============================
#       –ù–ê–°–¢–†–û–ô–ö–ò –ò JSON
# ===============================

load_dotenv()

print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

intents = discord.Intents.all()
bot = commands.Bot(command_prefix='!', intents=intents)

# –ü–∞–ø–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = "data"
os.makedirs(DATA_DIR, exist_ok=True)

SETTINGS_FILE = os.path.join(DATA_DIR, "verification_settings.json")
VERIFICATIONS_FILE = os.path.join(DATA_DIR, "verification_data.json")
COOLDOWNS_FILE = os.path.join(DATA_DIR, "cooldowns.json")

def load_json(path):
    if not os.path.exists(path):
        return {}
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {path}")
        return {}

def save_json(path, data):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False, default=str)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {path}: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
verification_settings = load_json(SETTINGS_FILE)
verification_data = load_json(VERIFICATIONS_FILE)
cooldown_users = {
    int(k): datetime.datetime.fromisoformat(v)
    for k, v in load_json(COOLDOWNS_FILE).items()
}
pending_verifications = {}

def save_all():
    save_json(SETTINGS_FILE, verification_settings)
    save_json(VERIFICATIONS_FILE, verification_data)
    save_json(COOLDOWNS_FILE, {str(k): v.isoformat() for k, v in cooldown_users.items()})

print("üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# ===============================
#       –ú–û–î–ê–õ–ö–ò –ù–ê–°–¢–†–û–ï–ö
# ===============================

class ChannelSetupModal(Modal):
    def __init__(self):
        super().__init__(title="üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
        self.welcome_channel = TextInput(label="ID –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", placeholder="123456789012345678", required=True)
        self.log_channel = TextInput(label="ID –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤", placeholder="123456789012345678", required=True)
        self.add_item(self.welcome_channel)
        self.add_item(self.log_channel)

    async def on_submit(self, interaction: discord.Interaction):
        guild_id = str(interaction.guild_id)
        if guild_id not in verification_settings:
            verification_settings[guild_id] = {}

        verification_settings[guild_id]['welcome_channel_id'] = int(self.welcome_channel.value)
        verification_settings[guild_id]['log_channel_id'] = int(self.log_channel.value)
        save_json(SETTINGS_FILE, verification_settings)

        channel = bot.get_channel(int(self.welcome_channel.value))
        if channel:
            async for msg in channel.history(limit=10):
                if msg.author == bot.user and msg.components:
                    await msg.delete()

            embed = discord.Embed(
                title="üìß –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
                description="## –ö–∞–∫ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é\n\n–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ **\"–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è\"** –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!",
                color=0x5865F2
            )
            await channel.send(embed=embed, view=StartVerificationView())

        await interaction.response.send_message("‚úÖ –ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!", ephemeral=True)


class RoleSetupModal(Modal):
    def __init__(self):
        super().__init__(title="üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π")
        self.temp_role = TextInput(label="ID –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏", required=True)
        self.verified_role = TextInput(label="ID –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–æ–ª–∏", required=True)
        self.admin_role = TextInput(label="ID —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –ø–∏–Ω–≥–∞)", required=True)
        self.add_item(self.temp_role)
        self.add_item(self.verified_role)
        self.add_item(self.admin_role)

    async def on_submit(self, interaction: discord.Interaction):
        guild_id = str(interaction.guild_id)
        if guild_id not in verification_settings:
            verification_settings[guild_id] = {}

        verification_settings[guild_id]['temp_role_id'] = int(self.temp_role.value)
        verification_settings[guild_id]['verified_role_id'] = int(self.verified_role.value)
        verification_settings[guild_id]['admin_role_id'] = int(self.admin_role.value)
        save_json(SETTINGS_FILE, verification_settings)
        await interaction.response.send_message("‚úÖ –†–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!", ephemeral=True)


class QuestionsSetupModal(Modal):
    def __init__(self):
        super().__init__(title="‚ùì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
        self.questions = TextInput(
            label="–í–æ–ø—Ä–æ—Å—ã (—á–µ—Ä–µ–∑ ;)",
            placeholder="–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?;–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?;–û—Ç–∫—É–¥–∞ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?",
            style=discord.TextStyle.paragraph,
            required=True,
        )
        self.add_item(self.questions)

    async def on_submit(self, interaction: discord.Interaction):
        guild_id = str(interaction.guild_id)
        if guild_id not in verification_settings:
            verification_settings[guild_id] = {}
        questions_list = [q.strip() for q in self.questions.value.split(";") if q.strip()]
        verification_settings[guild_id]['questions'] = questions_list
        save_json(SETTINGS_FILE, verification_settings)
        await interaction.response.send_message(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(questions_list)} –≤–æ–ø—Ä–æ—Å–æ–≤!", ephemeral=True)


# ===============================
#       –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–õ–ê–°–°–´
# ===============================

class SettingsSelect(Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", value="channels"),
            discord.SelectOption(label="üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π", value="roles"),
            discord.SelectOption(label="‚ùì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤", value="questions"),
            discord.SelectOption(label="üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", value="status")
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª...", options=options)

    async def callback(self, interaction: discord.Interaction):
        val = self.values[0]
        if val == "channels":
            await interaction.response.send_modal(ChannelSetupModal())
        elif val == "roles":
            await interaction.response.send_modal(RoleSetupModal())
        elif val == "questions":
            await interaction.response.send_modal(QuestionsSetupModal())
        elif val == "status":
            await show_current_settings(interaction)


async def show_current_settings(interaction: discord.Interaction):
    guild_id = str(interaction.guild_id)
    settings = verification_settings.get(guild_id, {})
    embed = discord.Embed(title="üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", color=0x5865F2)

    def get_mention(obj_id, get_func):
        obj = get_func(obj_id) if obj_id else None
        return obj.mention if obj else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"

    embed.add_field(name="üìä –ö–∞–Ω–∞–ª—ã", value=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {get_mention(settings.get('welcome_channel_id'), bot.get_channel)}\n–õ–æ–≥–∏: {get_mention(settings.get('log_channel_id'), bot.get_channel)}", inline=False)
    embed.add_field(name="üë• –†–æ–ª–∏", value=f"–í—Ä–µ–º–µ–Ω–Ω–∞—è: {get_mention(settings.get('temp_role_id'), interaction.guild.get_role)}\n–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {get_mention(settings.get('verified_role_id'), interaction.guild.get_role)}\n–ê–¥–º–∏–Ω: {get_mention(settings.get('admin_role_id'), interaction.guild.get_role)}", inline=False)

    questions = settings.get("questions", [])
    if questions:
        embed.add_field(name="‚ùì –í–æ–ø—Ä–æ—Å—ã", value="\n".join([f"{i+1}. {q}" for i, q in enumerate(questions[:5])]), inline=False)
    else:
        embed.add_field(name="‚ùì –í–æ–ø—Ä–æ—Å—ã", value="‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã", inline=False)

    await interaction.response.send_message(embed=embed, ephemeral=True)


class SettingsView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(SettingsSelect())


# ===============================
#        –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø
# ===============================

class StartVerificationView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è", style=discord.ButtonStyle.primary, custom_id="verify_start")
    async def start(self, interaction: discord.Interaction, button: Button):
        guild_id = str(interaction.guild_id)
        settings = verification_settings.get(guild_id)
        if not settings:
            await interaction.response.send_message("‚ùå –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if interaction.user.id in cooldown_users:
            cd = cooldown_users[interaction.user.id]
            if datetime.datetime.now() < cd:
                delta = cd - datetime.datetime.now()
                await interaction.response.send_message(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–∞—á–∞ —á–µ—Ä–µ–∑ {delta.seconds//3600}—á {delta.seconds%3600//60}–º", ephemeral=True)
                return

        pending_verifications[interaction.user.id] = {
            "guild_id": guild_id,
            "answers": [],
            "current": 0,
        }

        await interaction.response.send_message("‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!", ephemeral=True)
        try:
            await interaction.user.send("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:")
            await send_next_question(interaction.user)
        except discord.Forbidden:
            await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.", ephemeral=True)


async def send_next_question(user: discord.User):
    data = pending_verifications.get(user.id)
    if not data:
        return
    guild_id = data["guild_id"]
    settings = verification_settings.get(guild_id)
    if not settings or not settings.get("questions"):
        return

    if data["current"] < len(settings["questions"]):
        q = settings["questions"][data["current"]]
        await user.send(f"**–í–æ–ø—Ä–æ—Å {data['current'] + 1}/{len(settings['questions'])}:** {q}")
    else:
        await finish_verification(user)


async def finish_verification(user: discord.User):
    data = pending_verifications.get(user.id)
    if not data:
        return

    guild_id = data["guild_id"]
    settings = verification_settings.get(guild_id)
    guild = bot.get_guild(int(guild_id))
    member = guild.get_member(user.id)
    log_channel = bot.get_channel(settings["log_channel_id"])

    embed = discord.Embed(title=f"üìã –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è {user}", color=0x5865F2)
    for i, a in enumerate(data["answers"]):
        embed.add_field(name=f"{i+1}. {settings['questions'][i]}", value=a or "‚Äî", inline=False)

    admin_role = guild.get_role(settings["admin_role_id"])
    view = ModerationView(user.id, guild_id)
    msg = await log_channel.send(content=f"{admin_role.mention if admin_role else '@here'} –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!", embed=embed, view=view)

    verification_data[str(user.id)] = {"guild_id": guild_id, "answers": data["answers"], "message_id": msg.id, "time": datetime.datetime.now().isoformat()}
    save_json(VERIFICATIONS_FILE, verification_data)

    await user.send("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    del pending_verifications[user.id]


class ModerationView(View):
    def __init__(self, user_id, guild_id):
        super().__init__(timeout=None)
        self.user_id = user_id
        self.guild_id = guild_id

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success)
    async def accept(self, interaction: discord.Interaction, button: Button):
        guild = interaction.guild
        member = guild.get_member(self.user_id)
        s = verification_settings.get(self.guild_id)
        if member and s:
            vrole = guild.get_role(s["verified_role_id"])
            trole = guild.get_role(s["temp_role_id"])
            if trole and trole in member.roles:
                await member.remove_roles(trole)
            if vrole:
                await member.add_roles(vrole)
            await interaction.response.send_message("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!", ephemeral=True)
            await member.send("üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!")
        else:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞!", ephemeral=True)

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger)
    async def deny(self, interaction: discord.Interaction, button: Button):
        cooldown_users[self.user_id] = datetime.datetime.now() + datetime.timedelta(hours=24)
        save_json(COOLDOWNS_FILE, {str(k): v.isoformat() for k, v in cooldown_users.items()})
        await interaction.response.send_message("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ!", ephemeral=True)


# ===============================
#        –ö–û–ú–ê–ù–î–´
# ===============================

@bot.command()
@commands.has_permissions(administrator=True)
async def setup(ctx):
    embed = discord.Embed(title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã", description="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:", color=0x5865F2)
    await ctx.send(embed=embed, view=SettingsView())


@bot.event
async def on_message(msg):
    if msg.author.bot:
        return
    if msg.guild is None and msg.author.id in pending_verifications:
        data = pending_verifications[msg.author.id]
        guild_id = data["guild_id"]
        settings = verification_settings.get(guild_id)
        if settings:
            data["answers"].append(msg.content)
            data["current"] += 1
            await send_next_question(msg.author)
    await bot.process_commands(msg)


# ===============================
#       –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
# ===============================

@tasks.loop(hours=1)
async def cleanup():
    now = datetime.datetime.now()
    expired = [uid for uid, end in cooldown_users.items() if now >= end]
    for uid in expired:
        del cooldown_users[uid]
    if expired:
        save_json(COOLDOWNS_FILE, {str(k): v.isoformat() for k, v in cooldown_users.items()})
        print(f"üßπ –£–±—Ä–∞–Ω—ã —Å—Ç–∞—Ä—ã–µ –∫—É–ª–¥–∞—É–Ω—ã: {expired}")


@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    cleanup.start()


# ===============================
#          –ó–ê–ü–£–°–ö
# ===============================

TOKEN = os.getenv("DISCORD_TOKEN")
if not TOKEN:
    print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ .env!")
    exit(1)

bot.run(TOKEN)
